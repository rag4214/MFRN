# Generated by nginxconfig.io

user                 nginx;
pid                  /var/run/nginx.pid;
worker_processes     auto;
worker_rlimit_nofile 65535;

# Load modules
include              /etc/nginx/modules-enabled/*.conf;

events {
    multi_accept       on;
    worker_connections 65535;
}

http {
    charset                utf-8;
    sendfile               on;
    tcp_nopush             on;
    tcp_nodelay            on;
    server_tokens          off;
    log_not_found          off;
    types_hash_max_size    2048;
    types_hash_bucket_size 64;
    client_max_body_size   16M;

    # MIME
    include                mime.types;
    default_type           application/octet-stream;

    # Logging
    access_log             /var/log/nginx/access.log;
    error_log              /var/log/nginx/error.log warn;

    # SSL
    ssl_session_timeout    1d;
    ssl_session_cache      shared:SSL:10m;
    ssl_session_tickets    off;

    # Mozilla Intermediate configuration
    ssl_protocols          TLSv1.2 TLSv1.3;
    ssl_ciphers            ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

    # OCSP Stapling
    ssl_stapling           on;
    ssl_stapling_verify    on;
    resolver               1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4 208.67.222.222 208.67.220.220 valid=60s;
    resolver_timeout       2s;

    # Connection header for WebSocket reverse proxy
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ""      close;
    }

    map $remote_addr $proxy_forwarded_elem {
        # IPv4 addresses can be sent as-is
        ~^[0-9.]+$        "for=$remote_addr";

        # IPv6 addresses need to be bracketed and quoted
        ~^[0-9A-Fa-f:.]+$ "for=\"[$remote_addr]\"";

        # Unix domain socket names cannot be represented in RFC 7239 syntax
        default           "for=unknown";
    }

    map $http_forwarded $proxy_add_forwarded {
        # If the incoming Forwarded header is syntactically valid, append to it
        "~^(,[ \\t]*)*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*([ \\t]*,([ \\t]*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*)?)*$" "$http_forwarded, $proxy_forwarded_elem";

        # Otherwise, replace it
        default "$proxy_forwarded_elem";
    }

    # server {
    #     listen                  443 ssl http2;
    #     listen                  [::]:443 ssl http2;
    #     server_name             www.example.com;

    #     # SSL
    #     ssl_certificate         /etc/letsencrypt/live/example.com/fullchain.pem;
    #     ssl_certificate_key     /etc/letsencrypt/live/example.com/privkey.pem;
    #     ssl_trusted_certificate /etc/letsencrypt/live/example.com/chain.pem;

    #     # security
    #     include                 nginxconfig.io/security.conf;

    #     # reverse proxy
    #     location / {
    #         proxy_pass http://app:3000;
    #         include    nginxconfig.io/proxy.conf;
    #     }

    #     location /graphql {
    #         proxy_pass http://api:3000;
    #         include    nginxconfig.io/proxy.conf;
    #     }

    #     # additional config
    #     include nginxconfig.io/general.conf;
    # }

    # # non-www, subdomains redirect
    # server {
    #     listen                  443 ssl http2;
    #     listen                  [::]:443 ssl http2;
    #     server_name             .example.com;

    #     # SSL
    #     ssl_certificate         /etc/letsencrypt/live/example.com/fullchain.pem;
    #     ssl_certificate_key     /etc/letsencrypt/live/example.com/privkey.pem;
    #     ssl_trusted_certificate /etc/letsencrypt/live/example.com/chain.pem;

    #     return                  301 https://www.example.com$request_uri;
    # }

    # HTTP redirect
    server {
        listen                  80;
        listen                  [::]:80;
        server_name             .example.com;

        # Let's Encrypt / Certbot
        include                 nginxconfig.io/letsencrypt.conf;

        location / {
            return 301 https://www.example.com$request_uri;
        }
    }
}